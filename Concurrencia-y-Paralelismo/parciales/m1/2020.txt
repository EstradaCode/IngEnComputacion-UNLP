26-6-20

# 1. Resolver con SENTENCIAS AWAIT (<> y/o <await B; S>) el siguiente problema. Se debe 
# simular una maratón con C corredores donde en la llegada hay UNA máquinas 
# expendedoras de botella de agua. Cuando los C corredores han llegado al inicio comienza la 
# carrera. Cuando un corredor termina la carrera se dirige a la máquina expendedora, espera su 
# turno (respetando el orden de llegada), saca una botella y se retira. Nota: maximizar la 
# concurrencia.

int cant_corredores = 0;
Cola cola;
int siguiente = -1;

Process Corredor[id: 0..C-1]{
    <cant_corredores++;>
    <await(cant_corredores == C);>

    CorrerCarrera();

    <if (sig = -1){
        sig = id;
    }
    else 
        cola.push(id_next);
    >

    <await sig = id>

    <if (not empty(cola)) {
        sig = cola.pop();
    }
    else {
        sig = -1;
    }>
}

# 2. Resolver con SEMÁFOROS la siguiente situación. En una herrería hay 15 empleados que 
# forman 5 grupos de 3 personas; los grupos se forman de acuerdo al orden de llegada (los 3 
# primeros pertenecen al grupo 1, los 3 siguientes al grupo 2, y así sucesivamente). Ni bien 
# conoce el grupo al que pertenece el empleado comienza a trabajar (no debe esperar al resto 
# de grupo para comenzar). Cada grupo debe hacer exactamente P unidades de un producto 
# (cada unidad es hecha por un único empleado). Al terminar de hacer las P unidades de un 
# grupo, sus 3 empleados se deben juntar para retirarse juntos. Nota: maximizar la 
# concurrencia; ningún grupo puede hacer unidades de más. 

int grupo = 1;
int cant_llegaron= 0, cantProducida[5] = ([5] 0);
int terminaron[C] = ([C] 0);
sem mutex, mutexGrupos[C] = ([C] 0);

Process Empleado[id: 0..14]{
    int migrupo;
    P(mutex);
    migrupo = grupo;
    grupo = cant_llegaron div 3 + 1;
    cant_llegaron++;

    # if (cant_grupoactual == 3)
    #     grupo ++;
    #     cant_grupoactual = 0;
    V(mutex);

    P(mutexGrupos[migrupo]);
    while (cantProducida[migrupo] < P){
        cantProducida[migrupo]++;
        V(mutexGrupos[migrupo]);
        # Producir unidad
        P(mutexGrupos[migrupo]);
    }

    P(mutexGrupos[migrupo]);
    if (terminaron[grupo] == 2) {
        V(mutexGrupos[migrupo]);
        for i=0 to 1 do
            V(terminamos[grupo]);
    }
    else {
        terminaron[migrupo]++;
        V(mutexGrupos[migrupo]);
        P(terminamos[grupo]);
    }
}

# 3. Resolver con MONITORES la siguiente situación. Se debe simular un juego en el que 
# participan 30 jugadores que forman 5 grupos de 6 personas. Al llegar cada jugador debe 
# buscar las instrucciones y el grupo al que pertenece en un cofre de cemento privado para 
# cada uno; para esto deben usar un único martillo gigante de a  uno a la vez y de acuerdo al 
# orden de llegada. 
# Luego se debe juntar con el resto de los integrantes de su grupo y los 6 
# juntos realizan las acciones que indican sus instrucciones. Cuando un grupo termina su juego 
# le avisa a un Coordinador que le indica en qué orden término el grupo. Nota: maximizar la 
# concurrencia; suponer que existe n Jugar() quna funcióue simula que los 6 integrantes de un 
# grupo están jugando juntos; suponga que existe una función Romper(grupo) que simula 
# cuando un jugador está rompiendo su cofre con el martillo y le retorna el grupo al que 
# pertenece.

Process Jugador[id: 0..29]{
    Instrucciones instrucciones;
    Fila.hacerFila();
    Martillo.obtenerInstrucciones(instrucciones, grupo);
    Fila.liberar();
    M_Grupo.reunirseYJugar();
}

Process Grupo[id: 0..4]{
    M_Grupo.estanTodos();
    Jugar();
    Coordinador.terminamos(posicion);
    M_Grupo.entregarPosicion(posicion);
}

Monitor Coordinador{
    int posicion = 1;
    Procedure terminamos(pos: out int){
        pos = posicion;
        posicion++;
    }
}

Monitor M_Grupo[id: 0..4]{
    int posicion;

    Procedure reunirseYJugar(pos: out int){
        cant++;
        if (cant == 6){
            signal(estanTodos)
        }
        wait(esperar);
        pos = posicion;
    }

    Procedure entregarPosicion(pos: in int){
        posicion = posicion
        signal_all(esperar);
    }

    Procedure.estanTodos(){
        if (cant < 6)
            wait(estanTodos);
    }
}

Monitor Martillo{
    Instrucciones instrucciones[30]; // se suponen incializados

    Procedure obtenerInstrucciones(pid: in int; i: out Instrucciones; grupo: out int){
        i = instrucciones[pid];
        Romper(grupo);
    }
}

Monitor Fila{
    bool libre = true;
    cond pasar;
    int cant_esperando = 0;

    Procedure liberar(){
        cant_esperando--;
        if (cant_esperando > 0){
            signal(pasar);
        }
    }

    Procedure hacerFila(){
        cant_esperando++;
        if (cant_esperando > 1){
            wait(pasar);
        }
    }
}