// LONGITUD 

ORG 1000H
CADENA DB "FRANCISCOs"
FIN DB 00H ; CADENA POR REF REG
RES DB 0; RESULTADOR POR VALOR REG
ORG 3000h
LONGITUD: PUSH BX
HACER: CMP BYTE PTR [BX], 00H
JZ FIN_LONGITUD
INC AL
INC BX
JMP HACER
FIN_LONGITUD: POP BX
RET

ORG 2000h
MOV BX, OFFSET CADENA
MOV AX, 0; VOY A DEVOLVER EN AX (AL)
CALL LONGITUD
MOV RES, AL
HLT
END

// CONTAR MINUSCULAS
ORG 1000H
CADENA DB "fRanCIzCo"
FIN DB 00H ; CADENA POR REF REG
RES DB 0; RESULTADOR POR VALOR REG
ORG 3000h
CONT_MIN: PUSH BX
HACER: CMP BYTE PTR [BX], 00H
JZ FIN_MIN
CMP BYTE PTR[BX],61H
JS NEXT
CMP BYTE PTR[BX], 7BH
JNS NEXT
INC AL
NEXT: INC BX
JMP HACER
FIN_MIN: POP BX
RET

ORG 2000h
MOV BX, OFFSET CADENA
MOV AX, 0; VOY A DEVOLVER EN AX (AL)
CALL CONT_MIN
MOV RES, AL
HLT
END

// ES VOCAL

ORG 1000H
CADENA DB "fRanCIzCo"
VOCALES DB "AaEeIiOoUu"
FIN DB 00H ; CADENA POR REF REG
RES DB 0; RESULTADOR POR VALOR REG

ORG 3000h
ES_VOCAL: PUSH BX
MOV AH, 00H
HACER: CMP BYTE PTR [BX], 00H
JZ FIN_ES_VOCAL
FOR: CMP AL,[BX]
JZ VOCAL
INC BX
JMP HACER
VOCAL: MOV AH, 0FFH
FIN_ES_VOCAL: POP BX
RET

ORG 2000h
MOV BX, OFFSET VOCALES
MOV AL, CADENA; first element GUARDO RESULTADO EN AH
CALL ES_VOCAL
MOV RES, AH
; SI RES == OFFH ES VOCAL 
; SINO NO ES VOCAL
HLT
END

// CONTAR_VOCALES

ORG 1000H
CADENA DB "abeja"
FINCADENA DB 00H
VOCALES DB "AaEeIiOoUu"
FIN DB 00H ; CADENA POR REF REG
RES DB 0; RESULTADOR POR VALOR REG

ORG 3000h
CONTAR_VOC: PUSH BX ; utilizo bx para iterar la cadena, cx para guardar la dir de vocales
PUSH CX; al para el dato enviado a la subrutina es_vocal y ah para su retorno
CONTROL: CMP BYTE PTR[BX], 00H ; dl se encarga de contar las vocales
JZ FIN_CONTAR_VOC
DO: MOV AL, [BX]; FIRST ELEMENT
PUSH BX ; mando a pila momentaneamente el dato para no perderlo y poder operar con bx en la subrutina 
MOV BX, CX ; le asigno a bx la direccion de las vocales
CALL ES_VOCAL; para poder iterar libremente en la subrutina
POP BX ; devuelvo a bx la direccion de la cadena
IF: CMP AH, 00FFH ; cuantifico
JNZ SIGO
INC DL
SIGO:INC BX; sigo
JMP CONTROL
FIN_CONTAR_VOC: POP CX
POP BX
RET


ES_VOCAL: PUSH BX ; utilizo bx para iterar las vocales, ah para el resultado true o false
MOV AH, 00H
HACER: CMP BYTE PTR [BX], 00H
JZ FIN_ES_VOCAL
FOR: CMP AL,[BX]
JZ VOCAL
INC BX
JMP HACER
VOCAL: MOV AH, 0FFH
FIN_ES_VOCAL: POP BX ; reutilizacion sirve para poder usarlo donde quiera
RET

ORG 2000h
MOV CX, OFFSET VOCALES
MOV BX, OFFSET CADENA
MOV AL, CADENA; first element GUARDO RESULTADO EN AH
MOV DX, 0 ; ACA VOY A CONTAR LAS VOCALES
CALL CONTAR_VOC
MOV RES, DL
; SI RES == OFFH ES VOCAL 
; SINO NO ES VOCAL
HLT
END

// CONTAR_ CAR

ORG 1000H
CADENA DB "MAURICIO"
FINCADENA DB 00H
LETRA DB "I"
RESULT DB 0H

ORG 3000H
CONTAR_CAR: PUSH BX; DE REUTILIZACION
MOV BX, SP 
ADD BX, 4 ; 
PUSH AX; DE REUTILIZACION
MOV AX, [BX] ; le da el valor de ax por pila
ADD BX, 2
MOV BX, [BX]; OFFSET CADENA
LAZO: CMP BYTE PTR[BX], 00H 
JZ FIN
IF: CMP BYTE PTR[BX], AL
JNZ NEXT
INC AH
NEXT: INC BX
JMP LAZO 
FIN: MOV DL, AH ; UTILIZO DL PARA DEVOLVER EL VALOR, BX PARA PILA E ITERAR
; AX PARA DATO DE VALOR
POP AX
POP BX 
RET

ORG 2000H
; LETRA POR VALOR 
; CADENA POR REF TODO PILA
MOV BX, OFFSET CADENA
MOV AH, 0
MOV AL, LETRA
MOV DX, 0
PUSH BX
PUSH AX
CALL CONTAR_CAR
POP AX
POP BX
MOV RESULT, DL
HLT 
END

// REEMPLAZAR_CARACTER

ORG 1000H
CAR1 DB "A"; ORIGINAL
CAR2 DB "U"; REEMPLAZO
CADENA DB "MAURICIO"
FINCADENA DB 00H

ORG 3000H
REEM_CAR: PUSH BX; DE REUTILIZACION
MOV BX, SP 
ADD BX, 4 ; 
PUSH AX; DE REUTILIZACION
MOV AX, [BX] ; le da el valor de ax por pila
ADD BX, 2
MOV BX, [BX]; OFFSET CADENA
WHILE: CMP BYTE PTR[BX], 00H 
JZ FIN
IF: CMP BYTE PTR[BX], AL
JNZ NEXT
MOV [BX],AH
NEXT: INC BX
JMP WHILE
FIN: POP AX
POP BX 
RET

ORG 2000H
; LETRA POR VALOR 
; CADENA POR REF TODO PILA
MOV BX, OFFSET CADENA
MOV AL, CAR1
MOV AH, CAR2
PUSH BX
PUSH AX
CALL REEM_CAR
POP AX
POP BX
HLT 
END

