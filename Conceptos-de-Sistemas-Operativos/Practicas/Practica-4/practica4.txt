PRACTICA 4
---------
1 - A) PROGRAMA VS PROCESO
	PROGRAMA ES ESTATICO, EXISTE DESDE QUE SE ESCRIBE HASTA QUE SE BORRA, NO TIENE PC.
	PROCESO ES DINAMICO, EXISTE DESDE QUE SE CREA EN MEMORIA HASTA QUE TERMINA LA EJECUCIÓN, TIENE PC.
	B) TIEMPO DE RETORNO (TR): EL TIEMPO QUE TARDA UN PROCESO
EN TERMINAR DE EJECUTARSE DESDE QUE LLEGA A LA COLA DE LISTOS.
TIEMPO DE ESPERA (TE): EL TIEMPO QUE TARDA EN SER ATENDIDO O EJECUTADO EL PROCESO. (TR-TCPU)
	C) TIEMPO PROMEDIO DE RETORNO (TPR): PROMEDIO ENTRE EL TR DE CADA PROCESO EJECUTADO.
	TIEMPO PROMEDIO DE ESPERA (TPE): PROMEDIO ENTRE EL TE DE CADA PROCESO EJECUTADO.
	D) QUANTUM: MEDIDA DE CUANTO TIEMPO PODRÁ USAR EL PROCESADOR CADA PROCESO
	E) ALGORITMOS DE PLANIFICACIÓN: 
		* APROPIATIVO: PUEDE SER INTERRUMPIDO POR OTRO PROCESO Y LLEVADO A LA COLA DE LISTOS, NO MONOPOLIZA EL CPU, MAYOR OVERHEAD PERO MEJOR SERVICIO.
		* NO APROPIATIVO: CONTINUA HASTA QUE TERMINA O SE BLOQUEA POR ALGUN EVENTO PROPIO, SOLO EL MISMO PUEDE INTERRUMPIRSE.
	F) TAREAS REALIZADAS POR:
		PLANIFICADOR CORTO PLAZO: EL ENCARGADO DE LLEVAR DE LA COLA DE LISTOS A LA EJECUCIÓN AL PROCESO SELECCIONADO.
		PLANIFICADOR MEDIANO PLAZO: ENCARGADO DE LLEVAR DESDE EL SWAP A LA MEMORIA PRINCIPAL Y VICEVERSA (SWAPPING).
		PLANIFICADOR LARGO PLAZO: ENCARGADO DE CARGAR EL PROCESO EN MEMORIA (SWAP O PRINCIPAL).
	G) DISPATCHER:  LLEVA EL CONTROL DESDE UN PROCESO QUE SE ESTABA EJECUTANDO HACIA OTRO QUE DEBE COMENAZR, ASEGURANDO LA TRANSCICION ENTRE PROCESOS.
		TAREAS REALIZADAS POR EL DISPATCHER
		1- CONTEXT SWITCH: GUARDA EL ESTADO DEL PROCESO ACTUAL (REGS, PC, ETC), CARGA EL ESTADO DEL PROXIMO PROCESO SELECCIONADO POR EL SCHEDULER PARA QUE PUEDA EJECUTARSE.
		2- CAMBIO DE MODO: PASA EL CONTROL DEL S.O DEL MODO KERNEL A MODO USUARIO PARA EL PROCESO EN EJECUCIÓN UNA VEZ QUE EL CONTEXTO SE RESTAURA.
		3- ASIGNACION DE CPU AL PROCESO: LE DA EL CONTROL DE LA CPU AL PROCESO.
		4- SINCRONIZACIÓN Y TEMPORIZACION: ASEGURA Y COORDINA LOS PROCESOS PARA RESPETAR TODO LO PACTADO POR EL SCHEDULER.

2 - investigar comandos:
	
	
	b) PROCESO SE IMPRIME 8 VECES, ADJUNTAR DIBUJO.
	C) SI, LO ES. Por cada iteracion se duplican los procesos. c siendo 3 significa que se ejecutan 2³ = 8 procesos.
	d) comunicacion entre procesos a través de pipes.
	PIPE MECANISMO UTILIZADO PARA COMUNICAR DATOS ENTRE PROCESOS, ES UNIDIRECCIONAL, DONDE SE GENERA COMO UN PROCESO PADRE E HIJO. El pipe es una estructura compartida entre dos procesos de forma compartida, uno escriba datos y el otro lee los datos. Cuando se crea un pipe, el s.o asigna dos descriptores de archivo. fd[0] lectura y fd[1] escritura. uno escribe, bloqueando el opuesto (fd[0]) y luego el otro lee.
	e) informacion minima que necesita el so para un proceso:
	        PCB(PROCESS CONTROL BLOCK)
		- pid: id de proceso
		- estado: en que estado del ciclo de vida está
		- pc: contador del programa
		- prioridad: que prioridad debe tener
		- tiempo de cpu: rafagas
		- lista de procesos hijos.
		- informacion sobre la memoria asignada
CPU BOUND:
	SE UTILIZA MÁS EL CPU COMO RECURSO, DEPENDE DE SU RENDIMIENTO EN TIEMPO.
	- MAYOR PARTE UTILIZANDO LA CPU CON CALCULOS.
	- TIEMPO DE CPU MAYOR A TIEMPO DE ESPERA.
	EJ: RENDERIZACION DE GRAFICOS, REQUIERE POTENCIA DE CALCULO.
I/O BOUND:
	SE UTILIZA MAS LAS OPERACIOS DE ENTRADA Y SALIDA, DEPENDE DE SU VELOCIDAD DE RESPUESTA, LA ESPERA POR I/O LA LIMITA EN SU RENDIMIENTO.
G) ACA VA IMAGENES DE LOS ESTADOS DEL PROCESO

3 - ALGORITMOS DE PLANIFICACION
	+ FCFS (FIRST COME FIRST SERVE)
		no apropiativo, favorece a los cpu bound, ya que con una rafaga terminan. en cambio los i/o, al hacer e/s se quedan suspendidos, van a tener que volver a cargarse en memoria en la cola de listos para continuar.
	+ SJF (SHORTEST JOB FIRST)
		no apropiativo, seleeciona el proceso con rafaga mas corta. Causa inanición con procesos largos(COMO EL ALGORITMO PRIORIZA LOS CORTOS, SI VIENEN TODO EL TIEMPO PROCESOS CORTOS, EL LARGO NUNCA SE EJECUTA).
	+ ROUND ROBIN 
		APROPIATIVO, UTILIZA UN RELOJ CON UN TIEMPO QUANTUM (Q), FORMATO DE COLA CIRCULAR. TIENE UN CONTADOR (TIMER), PUEDE SER GLOBAL O LOCAL(PCB) EN TIMER VARIABLE(inicializa en q cada contador al iniciar), en TIMER FIJO (el contador se comparte, por lo que si un proceso debe atender E/S o termina, el siguiente sigue con lo que le quedó del timer, cuando llega a 0 se recarga y cambia de proceso).
	+ PRIORIDADES
	CAMPO DE PRIORIDADES, - VALOR + PRIORIDAD, SE SELECCIONA LOS DE MAS PRIORIDAD EN LA COLA DE LISTOS, HAY UNA COLA DE LISTOS POR CADA NIVEL DE PRIORIDAD, LOS DE BAJA PRORIDAD PODRIAN SUFRIR INANICION, LA SOLUCION ES PERMITIR QUE SE PUEDE CAMBIAR LA PRIORIDAD DURANTE EL CICLO DE VIDA (PENALTY O AGING), PUEDE SER APROPIATIVO O NO.
INANICION: CUANDO UN PROCESO NO TIENE OPORTUNIDAD DE EJECUTARSE DURANTE MUCHO TIEMPO.
OVERHEAD: MAS TIEMPO CAMBIANDO DE CONTEXTO QUE EJECUTANDO EN CPU.


